---
import LinkToComponent from "./LinkToComponent.astro";
const { name } = Astro.props;
import cem from "@connectedhomes/nucleus/custom-elements.json";
import jsdoc from "@connectedhomes/nucleus/ce-doc.json";

const compDetails = cem.tags.find((tag) => tag.name === name);
const jsdocDetails = jsdoc.find((tag) => tag.name === name);

const properties = compDetails?.properties;
const slots = jsdocDetails?.slots;
const events = compDetails?.events;
---

<style>
  .spec {
    th {
      border-block-start-width: 0;
      border-block-end-width: 2px;
      border-inline-start-width: 0;
      border-inline-end-width: 0;
    }

    td {
      border-block-start-width: 0;
      border-block-end-width: 1px;
      border-inline-start-width: 0;
      border-inline-end-width: 0;
    }
  }
</style>

{ 
  properties?.length > 0 &&  (
    <h4 id="attributes">Attributes</h4>
    <div class="spec-list">
      {
        properties?.map((property) => {
          if (!property.attribute || ['slottedStyles'].includes(property.name)) {
            return undefined;
          }
          const defaultValue = property.default?.replaceAll('"', '');
          return (
            <p><code>{property.attribute}</code></p>
            <dl>
              <div>
                <dt>Property</dt>
                <dd><code>{property.name}</code></dd>
              </div>
              {
                property.description && (
                <div>
                  <dt>Description</dt>
                  <dd>{property.description ?? ''}</dd>
                </div>
                )
              }
              {
                property.type?.indexOf('|') > -1 ? (
                  <div>
                    <dt>Type</dt>
                    <dd><span><code>string</code>&#32;</span></dd>
                  </div>
                  <div>
                    <dt>Options</dt>
                    <dd>{property.type?.split('|')?.map((type) => <span><code>{type.replaceAll('"','')}</code>&#32;</span>)}</dd>
                  </div>
                ) : (
                  <div>
                    <dt>Type</dt>
                    <dd>{property.type ? <span><code>{property.type.replaceAll('"','')}</code>&#32;</span> : <> </>} </dd>
                  </div>
                )
              }
              {
                (property.name === 'icon' || (name === 'ns-icon' && property.name === 'name') || (property.description?.includes('icon'))) 
                && (
                  <div>
                    <dt>Options</dt>
                    <dd>Refer <a href="/guidelines/assets/#icons">icons library</a> for the list of avaiable icons.</dd>
                  </div>
                )
              }
              {
                (property.name === 'illustration' || (name === 'ns-illustration' && property.name === 'name') || (property.description?.includes('illustration'))) 
                && (
                  <div>
                    <dt>Options</dt>
                    <dd>Refer <a href="/guidelines/assets/#illustrations">illustrations library</a> for the list of avaiable illustrations.</dd>
                  </div>
                )
              }
              {
                property.default && (
                  <div>
                    <dt>Default</dt>
                    <dd>{ defaultValue ? <code>{defaultValue}</code> : ''}</dd>
                  </div>
                )
              }
            </dl>
          );
        })
      }
    </div>
  )
}

{
  slots?.length > 0 && (
    <h4 id="slots">Slots</h4>
    <table class="spec">
      <thead>
        <tr>
          <th>Slot</th>
          <th>Permitted tags</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {
          slots?.map((slot) => {
            return (
              <tr>
                <td>{slot.name ? <code>{slot.name}</code> : 'Anonymous slot' }</td>
                <td>
                  {slot.permittedTagNames?.map((tag) => <span><LinkToComponent name={tag}/>&#32;</span>)}
                </td>
                <td>{slot.description}</td>
              </tr>
            );
          })
        }
      </tbody>
    </table>
  )
}

{
  events?.length > 0 && (
    <h4 id="events">Events</h4>
    <table class="spec">
      <thead>
        <tr>
          <th>Name</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {
          events?.map((event) => {
            return (
              <tr>
                <td><code>{event.name}</code></td>
                <td>{event.description}</td>
              </tr>
            );
          })
        }
      </tbody>
    </table>
  )
}
