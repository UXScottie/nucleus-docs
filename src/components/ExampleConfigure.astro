---
const { componentName } = Astro.props;

import ExampleRenderer from './ExampleRenderer.astro';
import { NucleusComponentRenderer } from './NucleusComponentRenderer';
import { NucleusCodeSnippet } from './NucleusCodeSnippet';
import CodeSnippet from './CodeSnippet.astro';

import customElements from '@connectedhomes/nucleus/ce-doc.json';
import cesm from '@connectedhomes/nucleus/custom-elements.json';

const customElement = customElements.find((customElement) => customElement.name === componentName);
const cem = cesm.tags.find((tag) => tag.name === componentName);
const htmlContent = Astro.props.src;
---
<script>
  function populateConfig() {
    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    if (componentElement) {
      for (var i = 0, atts = componentElement.attributes, n = atts.length; i < n; i++) {
        console.log(atts[i].nodeName, atts[i].nodeValue);
        const attrElements = document.querySelectorAll(`input[name=${atts[i].nodeName}]`);

        if (attrElements?.length === 1) {
          attrElements[0].setAttribute('value', atts[i].nodeValue ?? attrElements[0].defaultValue);
        } else if (attrElements?.length > 1) {
          Array.from(attrElements).
          filter((attrElement) => attrElement.value === atts[i].nodeValue).
          forEach((attrElement) => attrElement.checked = true);
        }
      }
    }

    const childrens = componentElement?.children;
    const slotMap = {
      default: []
    };
    Array.from(childrens)?.forEach(element => {
      const slotName = element.getAttribute('slot');
      if (slotName) {
        slotMap[slotName] = [element];
        const slottedElement = document.querySelector(`[name=${slotName}]`);
        slottedElement.value = element.outerHTML;
      } else {
        slotMap.default.push(element);
      }
    });
    const slottedElement = document.querySelector(`[name='default']`);
    if (slottedElement) {
      slottedElement.value = slotMap.default.map(element => element.outerHTML).join('');
    }
  }

  const inputs = document.querySelectorAll('input, textarea');
  Array.from(inputs).forEach((input) => {
    input.addEventListener('change', (event) => {
      if(input.type === 'radio') {
        const allOptions = document.querySelectorAll(`input[name="${input.name}"]`);
        allOptions?.forEach((option) => {
          if(option.value === event.target.value) {
            console.log('selected ', option.value);
            option.classList.add('changed');
          } else {
            option.classList.remove('changed');
          }
        });
        
      } else {
        input.classList.add('changed');
      }

    });
  });

  window.addEventListener('load', () => populateConfig());

  document.getElementById('reset-config')?.addEventListener('click', (ev) => {
    ev.preventDefault();
    populateConfig();
    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    
  });
  
  document.getElementById('play-config')?.addEventListener('click', (ev) => {
    ev.preventDefault();
    const changedElements = document.querySelectorAll('.changed');
    const componentElement = document.querySelector('.config-content')?.firstElementChild;
    const componentCopy = componentElement?.cloneNode(true);
    const tempContainer = document.createElement("div");
    tempContainer.appendChild(componentCopy);

    changedElements?.forEach((changedElement) => {
      const attrName = changedElement.name;
      const attrValue = changedElement.value;
      componentCopy.setAttribute(attrName, attrValue);
    });

    const exampleRenderer = document.querySelector('example-view');
    exampleRenderer.src = tempContainer.outerHTML;
    exampleRenderer.requestUpdate();

    const codeSnippet = document.querySelector('code-snippet');
    codeSnippet.src = tempContainer.outerHTML;

  });
</script>

<div class="config-content" set:html={htmlContent}>

</div>
<div class="config-container">
<div class="grid-element configure-component">
  <form>
    <button id="play-config">Run / Play</button>
    <button id="reset-config">Reset</button>
  {
    cem?.attributes && (
      <h2>Attributes</h2>
    )
  }
  {
    cem?.attributes?.map((attribute) => {
      const defaultValue = attribute.default?.replaceAll('"', '');
      if (attribute.type === 'string') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="text" name={attribute.name} value={defaultValue}>
          </div>
        );
      } else if (attribute.type?.indexOf("|") > -1) {
        const options = attribute.type?.replaceAll('"', '').split('|') ?? [];
        const attributeTitle = (<label>{attribute.name}</label>);

        const optionsHTML = options?.map((option) => {
          const checked = defaultValue === option ? '' : undefined;
          return (
            <span class="radio-element">
              <input type="radio" name={attribute.name} value={option} {checked}>
              <label>{option}</label>
            </span>
          );
        });
        return (
          <div class="config-elements">
          {
            [attributeTitle, optionsHTML]
          }
          </div>
        );      
      } else if (attribute.type === 'number') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="number" name={attribute.name} value={defaultValue}>
          </div>
        );
      } else if (attribute.type === 'boolean') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            {
              ['true', 'false'].map((option) => {
                const checked = defaultValue === option ? true : false;
                return (
                <span class="radio-element">
                  <input type="radio" name={attribute.name} value={option} {checked}>
                  <label>{option}</label>
                </span>
                )
              })
            }
          </div>
        );
      } else if (attribute.type === 'Array') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="text" name={attribute.name} />
          </div>
        );
      }
    })
  }
  {
    cem.slots && (
      <h2>Slots</h2>
    )
  }
  {
    cem.slots?.map((slot) => {
      return (
        <div class="config-elements">
          <label>{slot.name !== '' ? slot.name : 'default' }</label>
          <textarea name={slot.name !== '' ? slot.name : 'default'}></textarea>
        </div>
      );
    })
  }
  </form>
</div>

<div class="grid-element preview-code">
  <NucleusComponentRenderer src={htmlContent} client:visible/>
  <NucleusCodeSnippet src={htmlContent} client:visible/>
</div>
</div>
<style>

  .config-content {
    display: none;  
  }

  .configure-component {
    display: block;
    border: 1px solid var(--sl-color-gray-6);
    padding: 1rem;
  }

  .config-elements {
    padding-block: 0.5rem;

    label {
      padding-inline-end: 2rem;
    }

    input {
      height: 1.5rem;
    }

     input[type='text'] {
      width: 30%;
      border-radius: 0.5rem;
      border: 1px solid var(--sl-color-gray-1);
    }

    input[type='radio'] {
      width: 1.25rem;
      border-radius: 0.5rem;
      border: 1px solid var(--sl-color-gray-1);
    }

    textarea {
      width: 40%;
      min-height: 5rem;
      border-radius: 0.5rem;
      border: 1px solid var(--sl-color-gray-1);
    }
  }
</style>
