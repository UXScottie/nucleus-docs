---
const { componentName } = Astro.props;
import customElements from '@connectedhomes/nucleus/ce-doc.json';
import cesm from '@connectedhomes/nucleus/custom-elements.json';

const customElement = customElements.find((customElement) => customElement.name === componentName);
const cem = cesm.tags.find((tag) => tag.name === componentName);
---
<script>
  const componentElement = document.querySelector('.config-content')?.firstElementChild;
  console.log(componentElement?.attributes);
  if (componentElement) {
    for (var i = 0, atts = componentElement.attributes, n = atts.length, arr = []; i < n; i++) {
      console.log(atts[i].nodeName, atts[i].nodeValue);
      const attrElements = document.querySelectorAll(`input[name=${atts[i].nodeName}]`);

      if (attrElements?.length === 1) {
        attrElements[0].setAttribute('value', atts[i].nodeValue);
      } else if (attrElements?.length > 1) {
        Array.from(attrElements).
        filter((attrElement) => attrElement.value === atts[i].nodeValue).
        forEach((attrElement) => attrElement.checked = true);
      }
    }
  }

  const childrens = componentElement?.children;
  const slotMap = {
    default: []
  };
  Array.from(childrens)?.forEach(element => {
    const slotName = element.getAttribute('slot');
    if (slotName) {
      slotMap[slotName] = [element];
      const slottedElement = document.querySelector(`[name=${slotName}]`);
      slottedElement.value = element.outerHTML;
    } else {
      slotMap.default.push(element);
    }
  });
  const slottedElement = document.querySelector(`[name='default']`);
  if (slottedElement) {
    slottedElement.value = slotMap.default.map(element => element.outerHTML).join('');
  }

  const inputs = document.querySelectorAll('input, textarea');
  console.log(inputs);
  Array.from(inputs).forEach((input) => {
    console.log('input listeners');
    input.addEventListener('change', () => {
      console.log('input changed');
      input.classList.add('changed');
    });
  });

  document.querySelector('form')?.addEventListener('submit', (ev) => {
    ev.preventDefault();
    const changedElements = document.querySelectorAll('.changed');
    console.log('changed elements, ', changedElements);

  });
</script>
<div class="config-content">
  <slot />
</div>

<div class="configure-component">
  <form>
    <button type="submit">Run / Play</button>
  {
    cem?.attributes && (
      <h2>Attributes</h2>
    )
  }
  {
    cem?.attributes?.map((attribute) => {
      const defaultValue = attribute.default?.replaceAll('"', '');
      if (attribute.type === 'string') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="text" name={attribute.name} value={defaultValue}>
          </div>
        );
      } else if (attribute.type?.indexOf("|") > -1) {
        const options = attribute.type?.replaceAll('"', '').split('|') ?? [];
        const attributeTitle = (<label>{attribute.name}</label>);

        const optionsHTML = options?.map((option) => {
          const checked = defaultValue === option ? true : false;
          return (
            <span class="radio-element">
              <input type="radio" name={attribute.name} value={option} {checked}>
              <label>{option}</label>
            </span>
          );
        });
        return (
          <div class="config-elements">
          {
            [attributeTitle, optionsHTML]
          }
          </div>
        );      
      } else if (attribute.type === 'number') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="number" name={attribute.name} value={defaultValue}>
          </div>
        );
      } else if (attribute.type === 'boolean') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            {
              ['true', 'false'].map((option) => {
                const checked = defaultValue === option ? true : false;
                return (
                <span class="radio-element">
                  <input type="radio" name={attribute.name} value={option} {checked}>
                  <label>{option}</label>
                </span>
                )
              })
            }
          </div>
        );
      } else if (attribute.type === 'Array') {
        return (
          <div class="config-elements">
            <label>{attribute.name}</label>
            <input type="text" name={attribute.name} />
          </div>
        );
      }
    })
  }
  {
    cem.slots && (
      <h2>Slots</h2>
    )
  }
  {
    cem.slots?.map((slot) => {
      return (
        <div class="config-elements">
          <label>{slot.name !== '' ? slot.name : 'default' }</label>
          <textarea name={slot.name !== '' ? slot.name : 'default'}></textarea>
        </div>
      );
    })
  }
  </form>
</div>

<style>
  .config-content {
    display: none;  
  }

  .configure-component {
    display: block;
    border: 1px solid var(--sl-color-gray-6);
    padding: 1rem;
  }

  .config-elements {
    padding-block: 1rem;

    label {
      padding-inline-end: 2rem;
    }

    input {
      height: 1.5rem;
    }

     input[type='text'] {
      width: 30%;
    }

    textarea {
      width: 40%;
      min-height: 5rem;
    }
  }
</style>
